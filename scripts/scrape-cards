#!/usr/bin/python

################################################################################
# scrape-cards
# Get the card names and card URLs using the yugioh wiki's semantic search
################################################################################

import codecs
import os.path
import rdflib
import re
import requests
import sys

from bs4 import BeautifulSoup
from xml.dom import minidom
from xml.dom.minidom import Document

CARD_PATH = sys.argv[1]
ERROR_PATH = sys.argv[2]
INCLUDE_PATH = sys.argv[3]
FORCE_VALUE = sys.argv[4]
FORCE = False
if FORCE_VALUE == "true":
    FORCE = True

sys.path.append(INCLUDE_PATH)

import DataTypes

if not os.path.exists(ERROR_PATH):
    os.makedirs(ERROR_PATH)

ERROR_FILE = os.path.join(ERROR_PATH, 'carderrors.txt')
errorfile = codecs.open(ERROR_FILE,'w','utf-8')

# constants
WIKI_ROOT='http://yugioh.wikia.com/wiki/'
LIMIT=500
URI_HEAD=("http://yugioh.wikia.com/wiki/Special:Ask/"
          "-5B-5BMedium::TCG-7C-7COCG-5D-5D/offset%3D")
URI_TAIL="/limit%3D" + str(LIMIT) + "/format%3Drdf/syntax%3Drdfxml"

def log_error(name):
    errorfile.write(name + '\n')

def card_path(cardname):
    return os.path.join(CARD_PATH, cardname.replace('/','_'))

def check_cardpath(cardname):
    if FORCE:
        return False
    cardpath = card_path(cardname)
    # check if the card already exists, skip update
    if os.path.isfile(cardpath):
        return True
    return False

def normalize(field):
    if field == 'Quick-Play':
        return 'QUICK'
    return field.replace(' ','').replace('-','').upper()

def validate_output(data):
    if not data['name']:
        print 'Invalid empty name'
        return False

    try:
        DataTypes.CardType.reverse_mapping[normalize(data['cardType'])]
    except KeyError:
        print data['name'] + ' Invalid cardType: ' + data['cardType']
        return False
    try:
        DataTypes.Attribute.reverse_mapping[normalize(data['attribute'])]
    except KeyError:
        print data['name'] + ' Invalid attribute: ' + data['attribute']
        return False

    try:
        DataTypes.MonsterType.reverse_mapping[normalize(data['monsterType'])]
    except KeyError:
        print data['name'] + ' Invalid monsterType: ' + data['monsterType']
        return False

    try:
        DataTypes.MonsterType.reverse_mapping[normalize(data['monsterAbility'])]
    except KeyError:
        print data['name'] + ' Invalid monsterAbility: ' + data['monsterAbility']
        return False

    try:
        DataTypes.Type.reverse_mapping[normalize(data['type'])]
    except KeyError:
        print data['name'] + ' Invalid type: ' + data['type']
        return False

    try:
        DataTypes.SpellType.reverse_mapping[normalize(data['spellType'])]
    except KeyError:
        print data['name'] + ' Invalid spellType: ' + data['spellType']
        return False

    try:
        DataTypes.TrapType.reverse_mapping[normalize(data['trapType'])]
    except KeyError:
        print data['name'] + ' Invalid trapType: ' + data['trapType']
        return False

    if not str(data['level']).strip().isdigit():
        print data['name'] + ' Invalid level: ' + data['level']
        return False
    if not str(data['attack']).strip().isdigit():
        if str(data['attack']).strip() != '?':
            print data['name'] + ' Invalid attack: ' + data['attack']
            return False
    if not str(data['defense']).strip().isdigit():
        if str(data['defense']).strip() != '?':
            print data['name'] + ' Invalid defense: ' + data['defense']
            return False
    if not str(data['lpendulum']).strip().isdigit():
        print data['name'] + ' Invalid lpendulum: ' + data['lpendulum']
        return False
    if not str(data['rpendulum']).strip().isdigit():
        print data['name'] + ' Invalid rpendulum: ' + data['rpendulum']
        return False
    if not data['text']:
        print data['name'] + ' has empty text'
        return False
    return True

def append_xml(doc, root, data, element):
    node = doc.createElement(element)
    root.appendChild(node)
    value = data[element]
    if isinstance(value, (int, long)):
        text = doc.createTextNode(str(value))
    else:
        text = doc.createTextNode(value)
    node.appendChild(text)

def print_output(data, cardname):
    if not validate_output(data):
        print "Invalid: " + cardname
        log_error(data['name'])
        return

    cardpath = card_path(cardname)
    doc = Document()
    root = doc.createElement('card')
    doc.appendChild(root)

    append_xml(doc, root, data, 'name')
    append_xml(doc, root, data, 'cardType')
    append_xml(doc, root, data, 'attribute')
    append_xml(doc, root, data, 'monsterType')
    append_xml(doc, root, data, 'monsterAbility')
    append_xml(doc, root, data, 'type')
    append_xml(doc, root, data, 'level')
    append_xml(doc, root, data, 'attack')
    append_xml(doc, root, data, 'defense')
    append_xml(doc, root, data, 'lpendulum')
    append_xml(doc, root, data, 'rpendulum')
    append_xml(doc, root, data, 'spellType')
    append_xml(doc, root, data, 'trapType')
    append_xml(doc, root, data, 'text')

    doc.writexml(codecs.open(cardpath,'w','utf-8'),
            indent="",
            addindent="    ",
            newl='\n')
    doc.unlink()

    print "Writing " + cardname

def parse_monster(data):
    output = {}
    output['name'] = data['name']
    output['cardType'] = 'Monster'
    output['attribute'] = data['attribute']
    output['monsterType'] = data['monsterType'].split()[0]
    output['type'] = data['type']
    output['level'] = data['level']
    if 'attack' in data:
        output['attack'] = data['attack']
    else:
        output['attack'] = '0'
    if 'defense' in data:
        output['defense'] = data['defense']
    else:
        output['defense'] = '0'
    if 'lpendulum' in data:
        output['lpendulum'] = data['lpendulum']
    else:
        output['lpendulum'] = '0'
    if 'rpendulum' in data:
        output['rpendulum'] = data['rpendulum']
    else:
        output['rpendulum'] = '0'
    output['spellType'] = 'None'
    output['trapType'] = 'None'

    if not 'monsterAbility' in data:
        output['monsterAbility'] = 'None'
    else:
        output['monsterAbility'] = data['monsterAbility']

    if 'text' in data:
        output['text'] = data['text']
    else:
        output['text'] = ''
    return output

def parse_spell(data):
    # fill out the output data structure
    output = {}
    output['name'] = data['name']
    output['cardType'] = 'Spell'
    output['attribute'] = 'None'
    output['monsterType'] = 'None'
    output['monsterAbility'] = 'None'
    output['type'] = 'None'
    output['level'] = '0'
    output['attack'] = '0'
    output['defense'] = '0'
    output['lpendulum'] = '0'
    output['rpendulum'] = '0'
    output['spellType'] = data['type0']
    output['trapType'] = 'None'
    output['text'] = data['text']
    return output

def parse_trap(data):
    # fill out the output data structure
    output = {}
    output['name'] = data['name']
    output['cardType'] = 'Trap'
    output['attribute'] = 'None'
    output['monsterType'] = 'None'
    output['monsterAbility'] = 'None'
    output['type'] = 'None'
    output['level'] = '0'
    output['attack'] = '0'
    output['defense'] = '0'
    output['lpendulum'] = '0'
    output['rpendulum'] = '0'
    output['spellType'] = 'None'
    output['trapType'] = data['type0']
    output['text'] = data['text']
    return output

def parse_card(uri, cardname):
    origcardname = cardname;
    cardname = cardname.replace(' ','_').replace('#','').strip()

    # check the card path
    if check_cardpath(cardname):
        print "Skipping " + origcardname
        return

    print uri
    r = requests.get(uri)
    html = r.text
    soup = BeautifulSoup(html)
    contents = soup.find_all("table",{"class":"cardtable"})

    data = {}
    data['name'] = origcardname

    if len(contents) == 0:
        log_error(origcardname)
        return # we have truly failed

    # get the main card attributes
    for tag in contents:
        trTags = tag.find_all("tr")
        for trTag in trTags:
            thTags = trTag.find_all("th")
            tdTags = trTag.find_all("td")
            headers = []
            info = []
            for thTag in thTags:
                headers.append(thTag.text.strip())
            for tdTag in tdTags:
                info.append(tdTag.text.strip())
            if len(headers) == 1 and len(info) == 1:
                if headers[0].strip() == 'English':
                    data['name'] = info[0].strip()
                elif headers[0].strip() == 'Attribute':
                    data['cardType'] = 'Monster'
                    data['attribute'] = info[0].strip()
                elif headers[0].strip() == 'Type':
                    if info[0].strip() == 'Spell Card':
                        data['cardType'] = 'Spell'
                    elif info[0].strip() == 'Trap Card':
                        data['cardType'] = 'Trap'
                    else:
                        data['type'] = info[0].strip()
                        data['monsterType'] = 'Normal'
                elif headers[0].strip() == 'Types':
                    types = re.split(r'/', info[0].strip())
                    if len(types) < 2:
                        log_error(origcardname)
                        return
                    data['type'] = types[0]
                    data['monsterType'] = types[1]
                    if len(types) == 3:
                        data['monsterAbility'] = types[2]
                elif headers[0].strip() == 'Level':
                    data['level'] = int(float(info[0]))
                elif headers[0].strip() == 'Rank':
                    data['level'] = int(float(info[0]))
                elif headers[0].strip() == 'Property':
                    data['type0'] = info[0].strip()
                elif headers[0].strip() == 'ATK/DEF':
                    points = re.split(r'/', info[0].strip())
                    if points[0].isnumeric():
                        data['attack'] = int(float(points[0]))
                    else:
                        data['attack'] = points[0]
                    if points[1].isnumeric():
                        data['defense'] = int(float(points[1]))
                    else:
                        data['defense'] = points[1]
                elif headers[0].strip() == 'Pendulum Scale':
                    data['lpendulum'] = info[0].strip()
                    data['rpendulum'] = info[0].strip()

    # find the card text
    textboxes = soup.find_all("table",{"class":"collapsible expanded"})
    foundtext = False
    for tag in textboxes:
        if foundtext:
            break
        trTags = tag.find_all("tr")
        for trTag in trTags:
            if trTag.text.strip() == "English":
                foundtext = True
        tdTags = tag.find_all("td")
        for tdTag in tdTags:
            if foundtext:
                data['text'] = tdTag.text.strip()

    # process the output
    if 'cardType' in data:
        if data['cardType'] == 'Monster':
            print_output(parse_monster(data), cardname)
        elif data['cardType'] == 'Spell':
            print_output(parse_spell(data), cardname)
        elif data['cardType'] == 'Trap':
            print_output(parse_trap(data), cardname)
        else:
            log_error(origcardname)
    else:
        log_error(origcardname)


def read_rdfs():
    offset = 0
    try:
        while(True):
            g = rdflib.Graph()
            URI = URI_HEAD + str(offset) + URI_TAIL
            print URI
            g.load(URI)
            count = 0
            for s, p, o in g:
                count = count + 1
                # s contains the URL, check its a valid one
                if s.startswith(WIKI_ROOT):
                    # process this card
                    parse_card(s, g.value(s, rdflib.RDFS.label))
            offset += LIMIT
            # check if final page
            if count <= LIMIT:
                break
    except IOError as e:
        print URI + " not found"

read_rdfs()
