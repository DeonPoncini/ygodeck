#!/usr/bin/python

import codecs
import re
import string

INPUT_FILE = 'card.txt'
OUTPUT_CPP_FILE = 'CardFactory.cpp'

all_starts = []

cardin = codecs.open(INPUT_FILE,'r','utf-8')
output = codecs.open(OUTPUT_CPP_FILE,'w','utf-8')

def throw_statement():
    output.write('\tthrow std::runtime_error(name + " is not a valid card");\n')

def file_includes():
    output.write('// AUTOGENERATED FILE DO NOT MODIFY\n')
    output.write('#include "CardFactory.h"\n\n')
    output.write('#include "Card.h"\n\n')
    output.write('#include <stdexcept>\n\n')
    output.write('namespace ygo\n{\n\n')

def generate_main():
    output.write('\nCard make_card(const std::string& name)\n{\n')
    output.write('\tif (name.empty())\n\t{\n')
    output.write('\t\tthrow std::runtime_error("Empty name not allowed");\n')
    output.write('\t}\n')
    output.write('\tauto c = name.at(0);\n')
    output.write('\tswitch (c)\n\t{\n')
    for c in all_starts:
            output.write('\t\tcase \'' + c + '\':\treturn make_card' \
                    + c + '(name);\n')
    output.write('\t}\n')
    throw_statement()
    output.write('\n}\n')

def generate_card_factory():
    start = ''
    laststart = ''
    first = True
    for line in cardin:
        line = line.replace('"','\\"').strip()
        items = re.split(r'\t+', line.strip())
        start = line[:1]
        if start != laststart:
            laststart = start
            # we started a new group, start a new function
            if not first:
                throw_statement()
                output.write('}\n')
            else:
                first = False
            if start == '\\':
                start = '_'
            output.write('Card make_card' + start + \
                    '(const std::string& name)\n{\n')
            output.write('\tif (name == u8"' + items[0] + '")\n')
            all_starts.append(start)
        else:
            output.write('\telse if (name == u8"' + items[0] + '")\n')

def namespace_close():
    output.write('\n\n}\n')

file_includes()
generate_card_factory()
generate_main()
namespace_close()

